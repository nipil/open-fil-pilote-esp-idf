---------------------------------------------------------------------

GET /ofp-api/v1/reboot
    --> serve HTML page
        testing status entrypoint every second
        once status is successful, redirect to /

---------------------------------------------------------------------

GET /ofp-api/v1/status
    {
        "uptime": {
            "system": 795341,
            "wifi": {
                "attempts": 150,
                "successes": 147,
                "disconnects": 146,
                "cumulated_uptime": 765316,
                "last_connect_time": 90123
            }
        }
    }

---------------------------------------------------------------------

GET /ofp-api/v1/orders
    {
        "orders": [
            {
                "id": "offload",
                "name": "Arr&ecirc;t / D&eacute;lestage",
                "class": "secondary"
            },
            ...
        ]
    }

---------------------------------------------------------------------

GET /ofp-api/v1/override
    { override: "none" }

PUT /ofp-api/v1/override
    { override: "nofreeze" }

---------------------------------------------------------------------

GET /ofp-api/v1/zones
    {
        "zones": [
            {
                "id": "e1z1",
                "description": "salon",
                "mode": ":planning:${planningID}",
                "current": "economy"
            },
            {
                "id": "e1z2",
                "description": "chambre parents",
                "mode": ":fixed:nofreeze",
                "current": "nofreeze"
            },
            ...
        ]
    }

PATCH /ofp-api/v1/zones/${zoneId}
    { description: "wxc" }
    { mode: ":fixed:offload" }
    { mode: ":planning:${planningId}" }

---------------------------------------------------------------------

GET /ofp-api/v1/plannings
    {
        "plannings": [
            {
                "id": 0,
                "name": "Pi&egrave;ces de vie"
            },
            ...
        ]
    }

POST /ofp-api/v1/plannings
    { name: "qsd" }

PATCH /ofp-api/v1/plannings/${planningId}
    { name: "toto" }

DELETE /ofp-api/v1/plannings/${planningId}

GET /ofp-api/v1/plannings/${planningId}
    {
        "slots": [
            {
            "id": 0,
            "dow": 6,
            "hour": 0,
            "minute": 0,
            "order": "nofreeze"
            },
            {
            "id": 1,
            "dow": 4,
            "hour": 5,
            "minute": 0,
            "order": "economy"
            },
            ...
        ]
    }

---------------------------------------------------------------------

POST /ofp-api/v1/plannings/${planningId}/slots
    {
    "dow": 0,
    "hour": 0,
    "minute": 0,
    "order": "offload"
    }

PATCH /ofp-api/v1/plannings/${planningId}/slots/${slotId}
    { "dow": 0 }
    { "hour": 0 }
    { "minute": 0 }
    { "order": "offload" }

DELETE /ofp-api/v1/plannings/${planningId}/slots/${slotId}

---------------------------------------------------------------------

GET /ofp-api/v1/accounts
    {
        "accounts": [
            {
                "id": "admin",
                "type": "admin"
            },
            {
                "id": "bob",
                "type": "user"
            },
            ...
        ]
    }

POST /ofp-api/v1/accounts
    { "id": "toto", "password": "pouet" }

DELETE /ofp-api/v1/accounts/${userId}

PATCH /ofp-api/v1/accounts/${userId}
    { "password": "pouet" }

---------------------------------------------------------------------

GET /ofp-api/v1/certificate

    Get installed certificates
    - "embedded" are the ones provided (compiled in) the firmware
    - "stored" are the ones either the self-signed ones (from PUT) or the uploaded ones (from POST)

    {
        "embedded":     {
                "https_certs":  "-----BEGIN CERTIFICATE-----\nMIIC...doI\n-----END CERTIFICATE-----\n",
                "https_key":    "-----BEGIN PRIVATE KEY-----\nMIIC...6m0=\n-----END PRIVATE KEY-----\n"
        },
        "stored":       {
                "https_certs":  "-----BEGIN CERTIFICATE-----\nMIID...MDgRjw==\n-----END CERTIFICATE-----\n",
                "https_key":    "-----BEGIN RSA PRIVATE KEY-----\nMIIEp...Z9A==\n-----END RSA PRIVATE KEY-----\n"
        }
    }

DELETE /ofp-api/v1/certificate

    Remove stored certificate and key

POST /ofp-api/v1/certificate

    Checks and stores certificate and key

    See Web UI for how to build the PEM certificate bundle.
    Then you can build a certificate bundle and upload it via WebUI.

    Or you can follow the example below for to send it from the command-line using CURL.
    - the content type is required
    - the "--data-binary" is required to keep newlines, which are part of the PEM format
    
    Example:
        curl -sS --insecure -X POST https://admin:adminpwd@openfilpilote.local/ofp-api/v1/certificate --header 'Content-Type: application/x-pem-file' --data-binary @full.pem
    

PUT /ofp-api/v1/certificate/selfsigned

    Generates, stores, and uses a 2048-bit RSA self-signed certificate

---------------------------------------------------------------------

POST /ofp-api/v1/upgrade

    Required content-type: application/octet-stream
    Transport mode: binary

    Example CURL:
        curl --silent --show-error --header "Content-Type: application/octet-stream" -X POST --insecure https://admin:admin@adresseip/ofp-api/v1/upgrade --data-binary @firmware.bin

---------------------------------------------------------------------

GET /ofp-api/v1/hardware
    {
        "current": "M1E1",
        "supported": [
            {
                "id": "ESP32",
                "description": "modules ou DevKit seul"
            },
            {
                "id": "M1E1",
                "description": "DevKit NodeMCU 30 pin + OFP M1 + OFP E1"
            },
            ...
        ]
    }

POST /ofp-api/v1/hardware
    FormData:
        hardware_type=OFP-10Z&hardware_parameter_name_dummy1=69&hardware_parameter_name_dummy2=blah+et+%C3%A9t%C3%A9+cou%23cou%3A+toto

GET /ofp-api/v1/hardware/${hardwareID}/parameters
{
    "parameters": [
      {
        "id": "dummy1",
        "description": "dummy number",
        "type": "number",
        "value": 69
      },
      {
        "id": "dummy2",
        "description": "dummy string",
        "type": "string",
        "value": "blah"
      },
      ...
    ]
}
